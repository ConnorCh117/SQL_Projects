





-- Data Cleaning Project



-- 1. Remove duplicates 
-- 2. Standardize the data 
-- 3. Adress null values or blank values 
-- 4. Remove any irrelevant columns or rows 

```sql
select *
from layoffs;
```

-- Removing deplicates
-- Create a new table and input data instead of raw data doing all the cleaning 

create table layoffs_staging 
like layoffs; 

insert into layoffs_staging
select *
from layoffs; 

-- Check all the duplicate rows
with duplicate_cte as 
(select *, 
row_number () over (
partition by company, location, industry, total_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging
)
select *
from duplicate_cte
where row_num > 1; 

-- creat a new table to contain data after removing duplicates 
CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` bigint DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT 
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


select *
from layoffs_staging2;

insert into layoffs_staging2
(select *, 
row_number () over (
partition by company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging
);
delete
from layoffs_staging2
where row_num > 1 ;


-- Standardising data 

select company, trim(company)
from layoffs_staging2;

update layoffs_staging2
set company = trim(company);

select distinct industry 
from layoffs_staging2
order by 1
;

select *
from layoffs_staging2
where industry like 'crypto%'
;

update layoffs_staging2 
set industry = 'crypto'
where industry like 'crypto%'
;

select distinct industry 
from layoffs_staging2;

select distinct country, trim(trailing '.' from country)
from layoffs_staging2
order by 1;

update layoffs_staging2
set country = trim(trailing '.' from country)
where country like 'United States%'
;

select `date`
from layoffs_staging2
;

update layoffs_staging2
set `date` = str_to_date(`date`, '%m/%d/%Y');

alter table layoffs_staging2
modify column `date` date;

-- check layoff related colomns with no value
select *
from layoffs_staging2
where total_laid_off is null
and percentage_laid_off is null
;

select *
from layoffs_staging2
where industry is null 
or industry = '';

-- transform empty data to null value for better standardizing 
update layoffs_staging2
set industry = null 
where industry ='';

select *
from layoffs_staging2
where company = 'Airbnb';

update layoffs_staging2
set industry = null 
where industry ='';

select *
from layoffs_staging2 as t1
join layoffs_staging2 as t2 
	on t1.company = t2.company and t1.location = t2.location 
where t1.company = 'Airbnb'
;

select *
from layoffs_staging2 as t1
join layoffs_staging2 as t2 
	on t1.company = t2.company and t1.location = t2.location 
where t1.industry is null
and t2.industry IS NOT NULL;

update layoffs_staging2 as t1
join layoffs_staging2 as t2
	on t1.company = t2.company and t1.location = t2.location
    set t1.industry = t2.industry 
	where t1.industry is null
	and t2.industry IS NOT NULL;
    

select *
from layoffs_staging2
where company like 'bally%';

-- delete empty data
select * 
from layoffs_staging2
where total_laid_off is null 
and percentage_laid_off is null;

delete 
from layoffs_staging2
where total_laid_off is null 
and percentage_laid_off is null;

-- remove irrelevent colomn
alter table layoffs_staging2
drop column row_num;

select * 
from layoffs_staging2;



-- Exploratory data analysis 

-- Find the max laid off in one go
select max(total_laid_off)
from layoffs_staging2;

-- Find out which company laid off all of their employees
select *
from layoffs_staging2
where percentage_laid_off = 1 
order by total_laid_off desc;

-- Order by funds_raised_millions we can see how big some of these companies were
SELECT *
FROM layoffs_staging2
WHERE  percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;

-- Companies with the biggest single Layoff
SELECT company, total_laid_off
FROM layoffs_staging2
ORDER BY 2 DESC
LIMIT 5;

-- Companies with the biggest aggregated Layoff
select company, sum(total_laid_off)
from layoffs_staging2
group by company 
order by 2 desc
limit 10;

-- by location
SELECT location, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY location
ORDER BY 2 DESC
LIMIT 10;

-- By country
SELECT country, SUM(total_laid_off)
FROM world_layoffs.layoffs_staging2
GROUP BY country
ORDER BY 2 DESC;

-- By industry
select industry, sum(total_laid_off)
from layoffs_staging2
group by industry 
order by 2 desc;

-- By year 
select year(`date`), sum(total_laid_off)
from layoffs_staging2
where date is not null
group by year(`date`)
order by 1 desc;

-- By stage 
SELECT stage, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY stage
ORDER BY 2 DESC;

-- By year and month
select substring(`date`, 1, 7) as `month`, sum(total_laid_off)
from layoffs_staging2
where substring(`date`, 1, 7) is not null 
group by `month`
order by 1 asc 
;

-- Calculate rolling sum of laid offs over month
with sum_layoff as 
(
select substring(`date`, 1, 7) as `month`, sum(total_laid_off) as total_off
from layoffs_staging2
where substring(`date`, 1, 7) is not null 
group by `month`
order by 1 asc 
)
select `month`, 
sum(total_off) over (order by `month` ) as rolling_total 
from sum_layoff;

-- which company in which year had the biggest laid off
select company, year(`date`), sum(total_laid_off)
from layoffs_staging2
group by company, year(`date`)
order by 3 desc;

-- which company had the biggest laid off within each year
with company_years as 
(
select company, year(`date`) as years, sum(total_laid_off) as t_lf
from layoffs_staging2
group by company, year(`date`)
order by 3 desc
), 
company_ranking_years as 
(select *,
dense_rank() over (partition by years order by t_lf desc) as ranking 
from company_years 
where years is not null)
select *
from company_ranking_years
where ranking <= 5
;













